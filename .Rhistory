#Question 2
ecount(graph1)
degree_distribution <- degree(graph1)
hist(degree_distribution, main = "Degree Distribution",
xlab = "Degree", ylab = "Frequency")
degree(graph1)
degree(graph1)
graph.density(graph1)
edge_density(graph1)
#Question 3
graph2 <- erdos.renyi.game(30, 0.5, directed = FALSE)
plot(graph2, vertex.label = NA)
plot(graph2, vertex.label = NA, vertex.size = 5)
plot(graph2, vertex.label = NA, vertex.size = 6)
plot(graph2, vertex.label = NA, vertex.size = 7)
plot(graph1, vertex.label=NA, vertex.size = 7)
plot(graph1, vertex.label=NA, vertex.size = 7)
degree(graph1)
degree_distribution <- degree(graph1)
hist(degree_distribution, main = "Degree Distribution",
xlab = "Degree", ylab = "Frequency")
edge_density(graph2)
graph2_large <- erdos.renyi.game(100, 0.5, directed = FALSE)
plot(graph2_large, vertex.label = NA, vertex.size = 7)
edge_density(graph2_large)
plot(graph1_pa, vertex.label = NA)
#Question 4
graph1_pa <- sample_pa(30)
plot(graph1_pa, vertex.label = NA)
edge_density(graph1_pa)
random_walk(graph1_pa, start = 1, steps = 8)
walk <- random_walk(graph1_pa, start = 1, steps = 8)
walk
#Question 4
graph1_pa <- sample_pa(30, directed = FALSE)
plot(graph1_pa, vertex.label = NA)
edge_density(graph1_pa)
walk <- random_walk(graph1_pa, start = 1, steps = 8)
walk
graph2_pa <- sample_pa(30, power = 3, directed = FALSE)
plot(graph2_pa, vertex.label = NA)
edge_density(graph2_pa)
graph2_pa <- sample_pa(30, power = 3)
plot(graph2_pa, vertex.label = NA)
edge_density(graph2_pa)
graph2_pa <- sample_pa(30, power = 3, directed = FALSE)
plot(graph2_pa, vertex.label = NA)
edge_density(graph2_pa)
edge_density(graph1_pa)
edge_density(graph2_pa)
library(igraph)
#Question 1
graph1 <- erdos.renyi.game(30, 0.17, directed = FALSE)
plot(graph1, vertex.label=NA, vertex.size = 7)
#Question 2
ecount(graph1)
degree(graph1)
degree_distribution <- degree(graph1)
hist(degree_distribution, main = "Degree Distribution",
xlab = "Degree", ylab = "Frequency")
edge_density(graph1)
library(igraph)
#Question 1
graph1 <- erdos.renyi.game(30, 0.17, directed = FALSE)
plot(graph1, vertex.label=NA, vertex.size = 7)
#Question 2
ecount(graph1)
degree(graph1)
degree_distribution <- degree(graph1)
hist(degree_distribution, main = "Degree Distribution",
xlab = "Degree", ylab = "Frequency")
edge_density(graph1)
library(igraph)
#Question 1
graph1 <- erdos.renyi.game(30, 0.17, directed = FALSE)
plot(graph1, vertex.label=NA, vertex.size = 7)
#Question 2
ecount(graph1)
degree(graph1)
degree_distribution <- degree(graph1)
hist(degree_distribution, main = "Degree Distribution",
xlab = "Degree", ylab = "Frequency")
edge_density(graph1)
library(igraph)
#Question 1
graph1 <- erdos.renyi.game(30, 0.17, directed = FALSE)
plot(graph1, vertex.label=NA, vertex.size = 7)
#Question 2
ecount(graph1)
degree(graph1)
degree_distribution <- degree(graph1)
hist(degree_distribution, main = "Degree Distribution",
xlab = "Degree", ylab = "Frequency")
edge_density(graph1)
plot(graph1, vertex.label=NA, vertex.size = 7)
#Question 2
ecount(graph1)
degree(graph1)
degree_distribution <- degree(graph1)
hist(degree_distribution, main = "Degree Distribution",
xlab = "Degree", ylab = "Frequency")
edge_density(graph1)
#Question 3
graph2 <- erdos.renyi.game(30, 0.5, directed = FALSE)
plot(graph2, vertex.label = NA, vertex.size = 7)
edge_density(graph2)
graph2_large <- erdos.renyi.game(100, 0.5, directed = FALSE)
edge_density(graph2_large)
#Question 4
graph1_pa <- sample_pa(30, directed = FALSE)
plot(graph1_pa, vertex.label = NA)
edge_density(graph1_pa)
random_walk(graph1_pa, start = 1, steps = 8)
graph2_pa <- sample_pa(30, power = 3, directed = FALSE)
plot(graph2_pa, vertex.label = NA)
edge_density(graph2_pa)
plot(graph1_pa, vertex.label = NA)
plot(graph1_pa, vertex.label = NA, vertex.size = 7)
graph2_pa <- sample_pa(30, power = 3, directed = FALSE)
plot(graph2_pa, vertex.label = NA)
plot(graph2_pa, vertex.label = NA, vertex.size = 7)
graph2_pa <- sample_pa(30, power = 2, directed = FALSE)
plot(graph2_pa, vertex.label = NA, vertex.size = 7)
edge_density(graph2_pa)
graph2_pa <- sample_pa(30, power = 4, directed = FALSE)
plot(graph2_pa, vertex.label = NA, vertex.size = 7)
edge_density(graph2_pa)
plot(graph1, vertex.label=NA, vertex.size = 7)
library(igraph)
#Question 1
graph1 <- erdos.renyi.game(30, 0.17, directed = FALSE)
plot(graph1, vertex.label=NA, vertex.size = 7)
library(igraph)
#Question 1
graph1 <- sample_gnp(30, 0.17, directed = FALSE)
plot(graph1, vertex.label=NA, vertex.size = 7)
#Question 1
graph1 <- erdos.renyi.game(30, 0.17, directed = FALSE)
plot(graph1, vertex.label=NA, vertex.size = 7)
library(igraph)
nodes <- read.csv("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Assignments/Assignment 7/nodesList.csv")
edges <- read.csv("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Assignments/Assignment 7/edgeList.csv")
edges <- read.csv("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Assignments/Assignment 7/edgesList.csv")
#Question 1
g <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
plot(g, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.5)
plot(g, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.3)
plot(g, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.4)
#Question 2
in_deg <- degree(g, mode = "in")
most_popular <- which.max(in_deg)
most_popular_node <- V(g)$name[most_popular]
cat("The most popular node is:", most_popular_node, "with in-degree of", in_deg[most_popular], "\n")
which.max(in_deg)
V(g)$name[most_popular]
which.max(in_deg)
V(g)$name[most_popular]
cat("The most popular node is:", most_popular_node, "with in-degree of", in_deg[most_popular], "\n")
most_popular <- which.max(in_deg)
most_popular_node <- V(g)$name[most_popular]
cat("The most popular node is:", most_popular_node, "with in-degree of", in_deg[most_popular], "\n")
cat(most_popular_node, "with in-degree of", in_deg[most_popular], "\n")
#Question 2
iin_deg <- degree(g, mode = "in")
top_5_popular <- order(in_deg, decreasing = TRUE)[1:5]
top_5_nodes <- V(g)$name[top_5_popular]
cat("Top 5 Most Popular Nodes by In-Degree:\n")
for (i in 1:5) {
cat(i, ". Node:", top_5_nodes[i], "with in-degree of", in_deg[top_5_popular[i]], "\n")
}
#Question 3
bet_centrality <- betweenness(g, directed = TRUE)
top_5_important <- order(bet_centrality, decreasing = TRUE)[1:5]
top_5_nodes_bet <- V(g)$name[top_5_important]
cat("Top 5 Most Important Nodes by Betweenness Centrality:\n")
for (i in 1:5) {
cat(i, ". Node:", top_5_nodes_bet[i], "with betweenness centrality of", bet_centrality[top_5_important[i]], "\n")
}
top_5_data <- nodes[nodes$ID %in% top_5_nodes_bet, ]
cat("\nFeatures of the Top 5 Nodes:\n")
print(top_5_data[, c("ID", "Followers", "Tweets", "Join_Date")])
View(nodes)
install.packages("readxl")
library(readxl)
nodesInfo <- read_xlsx("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Assignments/Assignment 7/Nodes.xlsx")
View(nodesInfo)
#Question 4
community <- cluster_edge_betweenness(g)
library(igraph)
library(readxl)
nodes <- read.csv("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Assignments/Assignment 7/nodesList.csv")
edges <- read.csv("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Assignments/Assignment 7/edgesList.csv")
nodesInfo <- read_xlsx("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Assignments/Assignment 7/Nodes.xlsx")
#Question 1
g <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
plot(g, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.4)
#Question 2
in_deg <- degree(g, mode = "in")
top_5_popular <- order(in_deg, decreasing = TRUE)[1:5]
top_5_nodes <- V(g)$name[top_5_popular]
cat("Top 5 Most Popular Nodes by In-Degree:\n")
for (i in 1:5) {
cat(i, ". Node:", top_5_nodes[i], "with in-degree of", in_deg[top_5_popular[i]], "\n")
}
#Question 3
bet_centrality <- betweenness(g, directed = TRUE)
top_5_important <- order(bet_centrality, decreasing = TRUE)[1:5]
top_5_nodes_bet <- V(g)$name[top_5_important]
cat("Top 5 Most Important Nodes by Betweenness Centrality:\n")
for (i in 1:5) {
cat(i, ". Node:", top_5_nodes_bet[i], "with betweenness centrality of",
bet_centrality[top_5_important[i]], "\n")
}
top_5_data <- nodesInfo[match(top_5_nodes_bet, nodesInfo$Vertex), ]
cat("\nComparative Information of the Top 5 Most Important Nodes:\n")
print(top_5_data[, c("Followed", "Followers", "Tweets")])
#Question 4
community <- cluster_edge_betweenness(g)
plot(community, g, vertex.size = 5, vertex.label = NA,
edge.arrow.size = 0.4, main = "Communities Detected by Edge Betweenness")
largest_community_size <- which.max(sizes(community))
cat("The largest community is Community", largest_community_size, "with size:",
sizes(community)[largest_community_size], "\n")
largest_community_members <- which(membership(community) == largest_community_size)
cat("Members of the largest community:\n")
print(V(g)$name[largest_community_members])
largest_comm_data <- nodesInfo[match(V(g)$name[largest_community_members], nodesInfo$Vertex), ]
#Question 3
bet_centrality <- betweenness(g, directed = TRUE)
top_5_important <- order(bet_centrality, decreasing = TRUE)[1:5]
top_5_nodes_bet <- V(g)$name[top_5_important]
cat("Top 5 Most Important Nodes by Betweenness Centrality:\n")
for (i in 1:5) {
cat(i, ". Node:", top_5_nodes_bet[i], "with betweenness centrality of",
bet_centrality[top_5_important[i]], "\n")
}
top_5_data <- nodesInfo[match(top_5_nodes_bet, nodesInfo$Vertex), ]
cat("\nComparative Information of the Top 5 Most Important Nodes:\n")
print(top_5_data[, c("Followed", "Followers", "Tweets")])
View(largest_comm_data)
# Load necessary libraries
library(igraph)
library(dplyr)
library(tidyr)
# Split the artist names into individual rows instead of lists
data <- data %>%
separate_rows(artist.s._name, sep = ", ") %>%
rename(artist = artist.s._name)
# Split the artist names into individual rows instead of lists
data <- data %>%
tidyr::separate_rows(artist.s._name, sep = ", ") %>%
rename(artist = artist.s._name)
library(tidyr)
install.packages("tidyr")
library(tidyr)
# Split the artist names into individual rows instead of lists
data <- data %>%
tidyr::separate_rows(artist.s._name, sep = ", ") %>%
rename(artist = artist.s._name)
# Load necessary libraries
library(igraph)
library(dplyr)
library(tidyr)
# Split the artist names into individual rows instead of lists
data <- data %>%
tidyr::separate_rows(artist.s._name, sep = ", ") %>%
rename(artist = artist.s._name)
# Check if artists are properly separated into rows
print(head(data)) # Confirm each artist is on its own row
# Load necessary libraries
library(igraph)
library(dplyr)
library(tidyr)
# Split the artist names into individual rows instead of lists
data <- data %>%
tidyr::separate_rows(artist.s._name, sep = ", ") %>%
rename(artist = artist.s._name)
ls("package:tidyr")
# Split the artist names into individual rows instead of lists
data <- data %>%
tidyr::separate_rows(artist.s._name, sep = ", ") %>%
rename(artist = artist.s._name)
data <- read.csv("spotify-2023.csv", fileEncoding = "latin1")
# Split the artist names into individual rows instead of lists
data <- data %>%
tidyr::separate_rows(artist.s._name, sep = ", ") %>%
rename(artist = artist.s._name)
data <- read.csv("spotify-2023.csv", fileEncoding = "latin1")
getwd()
setwd("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Project")
# Load necessary libraries
library(igraph)
library(dplyr)
library(tidyr)
data <- read.csv("spotify-2023.csv", fileEncoding = "latin1")
# Split the artist names into individual rows instead of lists
data <- data %>%
tidyr::separate_rows(artist.s._name, sep = ", ") %>%
rename(artist = artist.s._name)
View(data)
# Check if artists are properly separated into rows
print(head(data)) # Confirm each artist is on its own row
# Filter out tracks with only one artist to avoid n < m issue in combn()
data_filtered <- data %>%
group_by(track_name) %>%
filter(n() > 1) %>%
ungroup()
# Generate unique pairs of artists for each song
edges <- data_filtered %>%
group_by(track_name) %>%
reframe(pairs = combn(artist, 2, simplify = FALSE)) %>%
unnest(pairs) %>%
mutate(artist_1 = sapply(pairs, `[`, 1),
artist_2 = sapply(pairs, `[`, 2)) %>%
select(artist_1, artist_2) %>%
group_by(artist_1, artist_2) %>%
reframe(weight = n())
# Check if pairs and weights are correctly generated
print(head(edges))
View(data_filtered)
View(data)
View(edges)
View(data_filtered)
View(edges)
View(data)
data <- read.csv("spotify-2023.csv", fileEncoding = "latin1")
View(data)
# Split the artist names into individual rows instead of lists
data <- data %>%
tidyr::separate_rows(artist.s._name, sep = ", ") %>%
rename(artist = artist.s._name)
# Check if artists are properly separated into rows
print(head(data)) # Confirm each artist is on its own row
# Filter out tracks with only one artist to avoid n < m issue in combn()
data_filtered <- data %>%
group_by(track_name) %>%
filter(n() > 1) %>%
ungroup()
# Generate unique pairs of artists for each song
edges <- data_filtered %>%
group_by(track_name) %>%
reframe(pairs = combn(artist, 2, simplify = FALSE)) %>%
unnest(pairs) %>%
mutate(artist_1 = sapply(pairs, `[`, 1),
artist_2 = sapply(pairs, `[`, 2)) %>%
select(artist_1, artist_2) %>%
group_by(artist_1, artist_2) %>%
reframe(weight = n())
# Check if pairs and weights are correctly generated
print(head(edges))
# Filter out empty or NA artist values
data_filtered <- data %>%
filter(artist != "" & !is.na(artist)) %>%
group_by(track_name) %>%
filter(n() > 1) %>%
ungroup()
# Generate unique pairs of artists for each song
edges <- data_filtered %>%
group_by(track_name) %>%
reframe(pairs = combn(artist, 2, simplify = FALSE)) %>%
unnest(pairs) %>%
mutate(artist_1 = sapply(pairs, `[`, 1),
artist_2 = sapply(pairs, `[`, 2)) %>%
select(artist_1, artist_2) %>%
group_by(artist_1, artist_2) %>%
reframe(weight = n())
View(edges)
# Remove any rows with NA or empty artist pairs
edges <- edges %>%
filter(artist_1 != "" & !is.na(artist_1) &
artist_2 != "" & !is.na(artist_2))
# Check the resulting edges to confirm no NAs or empty strings
print(head(edges))
# Create the graph from the edges data
g <- graph_from_data_frame(edges, directed = FALSE)
# Set the edge weights based on the 'weight' column
E(g)$weight <- edges$weight
# Plot the graph (basic visualization)
plot(g, edge.width = E(g)$weight, vertex.label = V(g)$name)
View(edges)
setwd("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Project")
# Load necessary libraries
library(dplyr)
library(tidyr)
library(igraph)
# Load your data (replace 'spotify-2023.csv' with your actual file path)
spotify_df <- read.csv("spotify-2023.csv", encoding = "ISO-8859-1")
# Filter tracks with more than one artist
collaborations <- spotify_df %>% filter(artist_count > 1)
setwd("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Project")
# Load necessary libraries
library(dplyr)
library(tidyr)
library(igraph)
# Load your data (replace 'spotify-2023.csv' with your actual file path)
spotify_df <- read.csv("spotify-2023.csv", encoding = "ISO-8859-1")
# Filter tracks with more than one artist
collaborations <- spotify_df %>% filter(artist_count > 1)
# Initialize an empty data frame to store artist pairs
artist_pairs <- data.frame(Artist_1 = character(), Artist_2 = character(), stringsAsFactors = FALSE)
# Loop through each row to get the artist pairs
for (artists in collaborations$`artist(s)_name`) {
# Split the artists by commas and trim whitespace
artist_list <- trimws(unlist(strsplit(artists, ",")))
# Generate all unique pairs of artists for each track
if (length(artist_list) > 1) {
pairs <- combn(artist_list, 2, simplify = FALSE)
# Append each pair to the artist_pairs data frame
for (pair in pairs) {
artist_pairs <- rbind(artist_pairs, data.frame(Artist_1 = pair[1], Artist_2 = pair[2]))
}
}
}
# Count the occurrences of each artist pair
artist_pairs_count <- artist_pairs %>%
group_by(Artist_1, Artist_2) %>%
summarize(Collaboration_Count = n()) %>%
arrange(desc(Collaboration_Count))
# Create an igraph object from the artist pairs
graph <- graph_from_data_frame(artist_pairs_count, directed = FALSE)
# Plot the network graph
plot(graph,
vertex.size = 5,
vertex.label.cex = 0.7,
edge.width = artist_pairs_count$Collaboration_Count,  # Set edge width based on collaboration frequency
main = "Artist Collaboration Network")
View(graph)
rm(list = ls())
setwd("C:/Users/jaidy/Desktop/W2024/W2024 - S1/COSC 421/Project")
# Load necessary libraries
library(dplyr)
library(tidyr)
library(igraph)
# Load your data (replace 'spotify-2023.csv' with your actual file path)
spotify_df <- read.csv("spotify-2023.csv", encoding = "ISO-8859-1")
View(spotify_df)
# Filter tracks with more than one artist
collaborations <- spotify_df %>% filter(artist_count > 1)
View(collaborations)
# Initialize an empty data frame to store artist pairs
artist_pairs <- data.frame(Artist_1 = character(), Artist_2 = character(), stringsAsFactors = FALSE)
View(artist_pairs)
# Loop through each row to get the artist pairs
for (artists in collaborations$`artist(s)_name`) {
# Split the artists by commas and trim whitespace
artist_list <- trimws(unlist(strsplit(artists, ",")))
# Generate all unique pairs of artists for each track
if (length(artist_list) > 1) {
pairs <- combn(artist_list, 2, simplify = FALSE)
# Append each pair to the artist_pairs data frame
for (pair in pairs) {
artist_pairs <- rbind(artist_pairs, data.frame(Artist_1 = pair[1], Artist_2 = pair[2]))
}
}
}
# Loop through each row to get the artist pairs
for (artists in collaborations$`artist.s._name`) {
# Split the artists by commas and trim whitespace
artist_list <- trimws(unlist(strsplit(artists, ",")))
# Generate all unique pairs of artists for each track
if (length(artist_list) > 1) {
pairs <- combn(artist_list, 2, simplify = FALSE)
# Append each pair to the artist_pairs data frame
for (pair in pairs) {
artist_pairs <- rbind(artist_pairs, data.frame(Artist_1 = pair[1], Artist_2 = pair[2]))
}
}
}
View(artist_pairs)
# Count the occurrences of each artist pair
artist_pairs_count <- artist_pairs %>%
group_by(Artist_1, Artist_2) %>%
summarize(Collaboration_Count = n()) %>%
arrange(desc(Collaboration_Count))
# Create an igraph object from the artist pairs
graph <- graph_from_data_frame(artist_pairs_count, directed = FALSE)
# Plot the network graph
plot(graph,
vertex.size = 5,
vertex.label.cex = 0.7,
edge.width = artist_pairs_count$Collaboration_Count,  # Set edge width based on collaboration frequency
main = "Artist Collaboration Network")
# Calculate degree centrality
degree_centrality <- degree(graph, mode = "all")
# Calculate betweenness centrality
betweenness_centrality <- betweenness(graph, directed = FALSE)
# Combine the centrality measures into a data frame for easy viewing
centrality_df <- data.frame(
Artist = V(graph)$name,
Degree_Centrality = degree_centrality,
Betweenness_Centrality = betweenness_centrality
)
# Sort by degree centrality to see the most connected artists
centrality_df <- centrality_df %>%
arrange(desc(Degree_Centrality))
# Display the centrality measures
print(centrality_df)
# Calculate degree centrality
degree_centrality <- degree(graph, mode = "all")
# Calculate betweenness centrality
betweenness_centrality <- betweenness(graph, directed = FALSE)
# Combine the centrality measures into a data frame for easy viewing
centrality_df <- data.frame(
Artist = V(graph)$name,
Degree_Centrality = degree_centrality,
Betweenness_Centrality = betweenness_centrality
)
# Sort by degree centrality and then by betweenness centrality in descending order
centrality_df <- centrality_df %>%
arrange(desc(Degree_Centrality), desc(Betweenness_Centrality))
# Display the centrality measures
print(centrality_df)
